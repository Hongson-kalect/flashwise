import recordingStore, { AudioType } from "@/stores/recordingStore";
import { Audio } from "expo-av";

let recording: Audio.Recording | null = null;

//Nh·∫≠n 1 callback ƒë·ªÉ x·ª≠ l√Ω k·∫øt qu·∫£ ghi √¢m.
//Khi b·∫Øt ƒë·∫ßu ghi √¢m s·∫Ω ƒë·∫∑t callback v√†o store
//Khi c√≥ callback th√¨ s·∫Ω hi·ªÉn th·ªã h√¨nh minh h·ªça th·ªÉ hi·ªán ƒëang ghi √¢m
//Khi k·∫øt th√∫c ghi ƒÉm s·∫Ω t·ª´ store ƒë·ªÉ l·∫•y callback v·ª´a set ƒë·∫ª truy·ªÅn k·∫øt qu·∫£ ghi √¢m v√†o callback ƒë√≥
export const startRecording = async (
  callback: (result: AudioType | null) => void
) => {
  try {
    const permission = await Audio.requestPermissionsAsync();
    if (!permission.granted) {
      throw new Error("Permission to access microphone is required");
    }

    await Audio.setAudioModeAsync({
      allowsRecordingIOS: true,
      playsInSilentModeIOS: true,
    });

    recording = new Audio.Recording();
    await recording.prepareToRecordAsync(
      Audio.RECORDING_OPTIONS_PRESET_HIGH_QUALITY
    );

    //C√†i callback khi d·ª´ng ghi √¢m
    const setCallBack = recordingStore.getState().setOnRecording;
    setCallBack(callback);

    await recording.startAsync();
    console.log("üî¥ Recording started");
  } catch (err) {
    console.error("Failed to start recording", err);
  }
};

export const stopRecording = async (getResult: boolean = true) => {
  try {
    if (!recording) return;

    await recording.stopAndUnloadAsync();
    const uri = recording.getURI();
    console.log("‚úÖ Recording stopped. File saved at:", uri);

    // Tr·∫£ ƒëo·∫°n ghi √¢m v·ªÅ v√†o tham s·ªë c·ªßa callback khi start ghi √¢m
    const { onRecording, setOnRecording } = recordingStore.getState();
    getResult &&
      onRecording &&
      onRecording?.({
        uri,
        duration: (await recording.getStatusAsync()).durationMillis,
      });
    setOnRecording(null);

    // return {
    //   uri,
    //   duration: (await recording.getStatusAsync()).durationMillis,
    // };
  } catch (err) {
    console.error("Failed to stop recording", err);
  }
};
